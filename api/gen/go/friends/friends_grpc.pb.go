// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: friends/friends.proto

package friends

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendService_SendRequest_FullMethodName   = "/friends.FriendService/SendRequest"
	FriendService_AcceptRequest_FullMethodName = "/friends.FriendService/AcceptRequest"
	FriendService_DenyRequest_FullMethodName   = "/friends.FriendService/DenyRequest"
	FriendService_RemoveFriend_FullMethodName  = "/friends.FriendService/RemoveFriend"
	FriendService_ListFriends_FullMethodName   = "/friends.FriendService/ListFriends"
	FriendService_BlockUser_FullMethodName     = "/friends.FriendService/BlockUser"
)

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	SendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*FriendResponse, error)
	AcceptRequest(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error)
	DenyRequest(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error)
	RemoveFriend(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error)
	ListFriends(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendList, error)
	BlockUser(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) SendRequest(ctx context.Context, in *FriendRequest, opts ...grpc.CallOption) (*FriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, FriendService_SendRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) AcceptRequest(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, FriendService_AcceptRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) DenyRequest(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, FriendService_DenyRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) RemoveFriend(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, FriendService_RemoveFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) ListFriends(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*FriendList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendList)
	err := c.cc.Invoke(ctx, FriendService_ListFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) BlockUser(ctx context.Context, in *FriendAction, opts ...grpc.CallOption) (*FriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendResponse)
	err := c.cc.Invoke(ctx, FriendService_BlockUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility.
type FriendServiceServer interface {
	SendRequest(context.Context, *FriendRequest) (*FriendResponse, error)
	AcceptRequest(context.Context, *FriendAction) (*FriendResponse, error)
	DenyRequest(context.Context, *FriendAction) (*FriendResponse, error)
	RemoveFriend(context.Context, *FriendAction) (*FriendResponse, error)
	ListFriends(context.Context, *UserID) (*FriendList, error)
	BlockUser(context.Context, *FriendAction) (*FriendResponse, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendServiceServer struct{}

func (UnimplementedFriendServiceServer) SendRequest(context.Context, *FriendRequest) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedFriendServiceServer) AcceptRequest(context.Context, *FriendAction) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedFriendServiceServer) DenyRequest(context.Context, *FriendAction) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyRequest not implemented")
}
func (UnimplementedFriendServiceServer) RemoveFriend(context.Context, *FriendAction) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedFriendServiceServer) ListFriends(context.Context, *UserID) (*FriendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriends not implemented")
}
func (UnimplementedFriendServiceServer) BlockUser(context.Context, *FriendAction) (*FriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}
func (UnimplementedFriendServiceServer) testEmbeddedByValue()                       {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_SendRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).SendRequest(ctx, req.(*FriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_AcceptRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AcceptRequest(ctx, req.(*FriendAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_DenyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).DenyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_DenyRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).DenyRequest(ctx, req.(*FriendAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).RemoveFriend(ctx, req.(*FriendAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_ListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).ListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_ListFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).ListFriends(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendService_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).BlockUser(ctx, req.(*FriendAction))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friends.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _FriendService_SendRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _FriendService_AcceptRequest_Handler,
		},
		{
			MethodName: "DenyRequest",
			Handler:    _FriendService_DenyRequest_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _FriendService_RemoveFriend_Handler,
		},
		{
			MethodName: "ListFriends",
			Handler:    _FriendService_ListFriends_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _FriendService_BlockUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friends/friends.proto",
}
